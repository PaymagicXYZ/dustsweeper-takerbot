/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Trustus {
  export type TrustusPacketStruct = {
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    request: BytesLike;
    deadline: BigNumberish;
    payload: BytesLike;
  };

  export type TrustusPacketStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    v: number;
    r: string;
    s: string;
    request: string;
    deadline: BigNumber;
    payload: string;
  };
}

export interface DustSweeperInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_PROTOCOL_FEE_PCT()": FunctionFragment;
    "MAX_PROTOCOL_PAYOUT_SPLIT_PCT()": FunctionFragment;
    "MAX_SWEEP_ORDER_SIZE()": FunctionFragment;
    "MAX_TAKER_DISCOUNT_PCT()": FunctionFragment;
    "MIN_OVERAGE_RETURN_WEI()": FunctionFragment;
    "TRUSTUS_REQUEST_VALUE()": FunctionFragment;
    "destinations(address)": FunctionFragment;
    "getIsTrusted(address)": FunctionFragment;
    "getTokenDecimals(address)": FunctionFragment;
    "getTokenTakerDiscountTier(address)": FunctionFragment;
    "governorWallet()": FunctionFragment;
    "owner()": FunctionFragment;
    "payoutProtocolFees()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "protocolPayoutSplit()": FunctionFragment;
    "protocolWallet()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDestinationAddress(address)": FunctionFragment;
    "setGovernorWallet(address)": FunctionFragment;
    "setProtocolFeePercent(uint256)": FunctionFragment;
    "setProtocolPayoutSplit(uint256)": FunctionFragment;
    "setProtocolWallet(address)": FunctionFragment;
    "setTakerDiscountPercent(uint256,uint8)": FunctionFragment;
    "setTokenDecimals(address,uint8)": FunctionFragment;
    "setTokenTakerDiscountTier(address,uint8)": FunctionFragment;
    "setupToken(address)": FunctionFragment;
    "sweepDust(address[],address[],(uint8,bytes32,bytes32,bytes32,uint256,bytes))": FunctionFragment;
    "sweepWhitelist(address)": FunctionFragment;
    "sweepWhitelistOn()": FunctionFragment;
    "takerDiscountTiers(uint8)": FunctionFragment;
    "toggleIsTrusted(address)": FunctionFragment;
    "toggleSweepWhitelist()": FunctionFragment;
    "toggleSweepWhitelistAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "MAX_PROTOCOL_FEE_PCT"
      | "MAX_PROTOCOL_PAYOUT_SPLIT_PCT"
      | "MAX_SWEEP_ORDER_SIZE"
      | "MAX_TAKER_DISCOUNT_PCT"
      | "MIN_OVERAGE_RETURN_WEI"
      | "TRUSTUS_REQUEST_VALUE"
      | "destinations"
      | "getIsTrusted"
      | "getTokenDecimals"
      | "getTokenTakerDiscountTier"
      | "governorWallet"
      | "owner"
      | "payoutProtocolFees"
      | "protocolFee"
      | "protocolPayoutSplit"
      | "protocolWallet"
      | "renounceOwnership"
      | "setDestinationAddress"
      | "setGovernorWallet"
      | "setProtocolFeePercent"
      | "setProtocolPayoutSplit"
      | "setProtocolWallet"
      | "setTakerDiscountPercent"
      | "setTokenDecimals"
      | "setTokenTakerDiscountTier"
      | "setupToken"
      | "sweepDust"
      | "sweepWhitelist"
      | "sweepWhitelistOn"
      | "takerDiscountTiers"
      | "toggleIsTrusted"
      | "toggleSweepWhitelist"
      | "toggleSweepWhitelistAddress"
      | "transferOwnership"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_FEE_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_PAYOUT_SPLIT_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SWEEP_ORDER_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TAKER_DISCOUNT_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_OVERAGE_RETURN_WEI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUSTUS_REQUEST_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destinations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsTrusted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTakerDiscountTier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPayoutSplit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinationAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolPayoutSplit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTakerDiscountPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDecimals",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTakerDiscountTier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setupToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweepDust",
    values: [string[], string[], Trustus.TrustusPacketStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepWhitelistOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takerDiscountTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleIsTrusted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSweepWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSweepWhitelistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_FEE_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_PAYOUT_SPLIT_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SWEEP_ORDER_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TAKER_DISCOUNT_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_OVERAGE_RETURN_WEI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTUS_REQUEST_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTakerDiscountTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPayoutSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestinationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolPayoutSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTakerDiscountPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTakerDiscountTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepWhitelistOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takerDiscountTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleSweepWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleSweepWhitelistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolPayout(uint256,uint256)": EventFragment;
    "Sweep(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweep"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProtocolPayoutEventObject {
  protocolSplit: BigNumber;
  governorSplit: BigNumber;
}
export type ProtocolPayoutEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProtocolPayoutEventObject
>;

export type ProtocolPayoutEventFilter = TypedEventFilter<ProtocolPayoutEvent>;

export interface SweepEventObject {
  makerAddress: string;
  tokenAddress: string;
  tokenAmount: BigNumber;
  ethAmount: BigNumber;
}
export type SweepEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SweepEventObject
>;

export type SweepEventFilter = TypedEventFilter<SweepEvent>;

export interface DustSweeper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DustSweeperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_PROTOCOL_FEE_PCT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PROTOCOL_PAYOUT_SPLIT_PCT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_SWEEP_ORDER_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TAKER_DISCOUNT_PCT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_OVERAGE_RETURN_WEI(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRUSTUS_REQUEST_VALUE(overrides?: CallOverrides): Promise<[string]>;

    destinations(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getIsTrusted(
      _trustedProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTokenDecimals(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTokenTakerDiscountTier(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    governorWallet(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payoutProtocolFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolPayoutSplit(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolWallet(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDestinationAddress(
      _destinationAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGovernorWallet(
      _governorWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFeePercent(
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolPayoutSplit(
      _protocolPayoutSplitPercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolWallet(
      _protocolWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTakerDiscountPercent(
      _takerDiscountPercent: BigNumberish,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenDecimals(
      _tokenAddress: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenTakerDiscountTier(
      _tokenAddress: string,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setupToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweepDust(
      makers: string[],
      tokenAddresses: string[],
      packet: Trustus.TrustusPacketStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    sweepWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    sweepWhitelistOn(overrides?: CallOverrides): Promise<[boolean]>;

    takerDiscountTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toggleIsTrusted(
      _trustedProviderAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    toggleSweepWhitelist(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    toggleSweepWhitelistAddress(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_PROTOCOL_FEE_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PROTOCOL_PAYOUT_SPLIT_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SWEEP_ORDER_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TAKER_DISCOUNT_PCT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_OVERAGE_RETURN_WEI(overrides?: CallOverrides): Promise<BigNumber>;

  TRUSTUS_REQUEST_VALUE(overrides?: CallOverrides): Promise<string>;

  destinations(arg0: string, overrides?: CallOverrides): Promise<string>;

  getIsTrusted(
    _trustedProviderAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTokenDecimals(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getTokenTakerDiscountTier(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  governorWallet(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payoutProtocolFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  protocolPayoutSplit(overrides?: CallOverrides): Promise<BigNumber>;

  protocolWallet(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDestinationAddress(
    _destinationAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGovernorWallet(
    _governorWallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFeePercent(
    _protocolFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolPayoutSplit(
    _protocolPayoutSplitPercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolWallet(
    _protocolWallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTakerDiscountPercent(
    _takerDiscountPercent: BigNumberish,
    _tier: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenDecimals(
    _tokenAddress: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenTakerDiscountTier(
    _tokenAddress: string,
    _tier: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setupToken(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweepDust(
    makers: string[],
    tokenAddresses: string[],
    packet: Trustus.TrustusPacketStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  sweepWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  sweepWhitelistOn(overrides?: CallOverrides): Promise<boolean>;

  takerDiscountTiers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toggleIsTrusted(
    _trustedProviderAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  toggleSweepWhitelist(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  toggleSweepWhitelistAddress(
    _whitelistAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_PROTOCOL_FEE_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_PAYOUT_SPLIT_PCT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_SWEEP_ORDER_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TAKER_DISCOUNT_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_OVERAGE_RETURN_WEI(overrides?: CallOverrides): Promise<BigNumber>;

    TRUSTUS_REQUEST_VALUE(overrides?: CallOverrides): Promise<string>;

    destinations(arg0: string, overrides?: CallOverrides): Promise<string>;

    getIsTrusted(
      _trustedProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTokenDecimals(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getTokenTakerDiscountTier(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    governorWallet(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payoutProtocolFees(overrides?: CallOverrides): Promise<void>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPayoutSplit(overrides?: CallOverrides): Promise<BigNumber>;

    protocolWallet(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDestinationAddress(
      _destinationAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernorWallet(
      _governorWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeePercent(
      _protocolFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolPayoutSplit(
      _protocolPayoutSplitPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolWallet(
      _protocolWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTakerDiscountPercent(
      _takerDiscountPercent: BigNumberish,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenDecimals(
      _tokenAddress: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenTakerDiscountTier(
      _tokenAddress: string,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupToken(_tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    sweepDust(
      makers: string[],
      tokenAddresses: string[],
      packet: Trustus.TrustusPacketStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    sweepWhitelistOn(overrides?: CallOverrides): Promise<boolean>;

    takerDiscountTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleIsTrusted(
      _trustedProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleSweepWhitelist(overrides?: CallOverrides): Promise<void>;

    toggleSweepWhitelistAddress(
      _whitelistAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProtocolPayout(uint256,uint256)"(
      protocolSplit?: null,
      governorSplit?: null
    ): ProtocolPayoutEventFilter;
    ProtocolPayout(
      protocolSplit?: null,
      governorSplit?: null
    ): ProtocolPayoutEventFilter;

    "Sweep(address,address,uint256,uint256)"(
      makerAddress?: string | null,
      tokenAddress?: string | null,
      tokenAmount?: null,
      ethAmount?: null
    ): SweepEventFilter;
    Sweep(
      makerAddress?: string | null,
      tokenAddress?: string | null,
      tokenAmount?: null,
      ethAmount?: null
    ): SweepEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_FEE_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_PAYOUT_SPLIT_PCT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_SWEEP_ORDER_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TAKER_DISCOUNT_PCT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_OVERAGE_RETURN_WEI(overrides?: CallOverrides): Promise<BigNumber>;

    TRUSTUS_REQUEST_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    destinations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getIsTrusted(
      _trustedProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenDecimals(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenTakerDiscountTier(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorWallet(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payoutProtocolFees(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPayoutSplit(overrides?: CallOverrides): Promise<BigNumber>;

    protocolWallet(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDestinationAddress(
      _destinationAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGovernorWallet(
      _governorWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFeePercent(
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolPayoutSplit(
      _protocolPayoutSplitPercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolWallet(
      _protocolWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTakerDiscountPercent(
      _takerDiscountPercent: BigNumberish,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenDecimals(
      _tokenAddress: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenTakerDiscountTier(
      _tokenAddress: string,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setupToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sweepDust(
      makers: string[],
      tokenAddresses: string[],
      packet: Trustus.TrustusPacketStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    sweepWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sweepWhitelistOn(overrides?: CallOverrides): Promise<BigNumber>;

    takerDiscountTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleIsTrusted(
      _trustedProviderAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    toggleSweepWhitelist(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    toggleSweepWhitelistAddress(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PROTOCOL_FEE_PCT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PROTOCOL_PAYOUT_SPLIT_PCT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SWEEP_ORDER_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_TAKER_DISCOUNT_PCT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_OVERAGE_RETURN_WEI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRUSTUS_REQUEST_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destinations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsTrusted(
      _trustedProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenDecimals(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenTakerDiscountTier(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutProtocolFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPayoutSplit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDestinationAddress(
      _destinationAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGovernorWallet(
      _governorWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFeePercent(
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolPayoutSplit(
      _protocolPayoutSplitPercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolWallet(
      _protocolWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTakerDiscountPercent(
      _takerDiscountPercent: BigNumberish,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenDecimals(
      _tokenAddress: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenTakerDiscountTier(
      _tokenAddress: string,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setupToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweepDust(
      makers: string[],
      tokenAddresses: string[],
      packet: Trustus.TrustusPacketStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sweepWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweepWhitelistOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takerDiscountTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleIsTrusted(
      _trustedProviderAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    toggleSweepWhitelist(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    toggleSweepWhitelistAddress(
      _whitelistAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
