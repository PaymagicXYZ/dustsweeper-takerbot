/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Trustus {
  export type TrustusPacketStruct = {
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    request: BytesLike;
    deadline: BigNumberish;
    payload: BytesLike;
  };

  export type TrustusPacketStructOutput = [
    v: bigint,
    r: string,
    s: string,
    request: string,
    deadline: bigint,
    payload: string
  ] & {
    v: bigint;
    r: string;
    s: string;
    request: string;
    deadline: bigint;
    payload: string;
  };
}

export interface DustSweeperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "MAX_PROTOCOL_FEE_PCT"
      | "MAX_PROTOCOL_PAYOUT_SPLIT_PCT"
      | "MAX_SWEEP_ORDER_SIZE"
      | "MAX_TAKER_DISCOUNT_PCT"
      | "MIN_OVERAGE_RETURN_WEI"
      | "TRUSTUS_REQUEST_VALUE"
      | "destinations"
      | "getIsTrusted"
      | "getTokenDecimals"
      | "getTokenTakerDiscountTier"
      | "governorWallet"
      | "owner"
      | "payoutProtocolFees"
      | "protocolFee"
      | "protocolPayoutSplit"
      | "protocolWallet"
      | "renounceOwnership"
      | "setDestinationAddress"
      | "setGovernorWallet"
      | "setProtocolFeePercent"
      | "setProtocolPayoutSplit"
      | "setProtocolWallet"
      | "setTakerDiscountPercent"
      | "setTokenDecimals"
      | "setTokenTakerDiscountTier"
      | "setupToken"
      | "sweepDust"
      | "sweepWhitelist"
      | "sweepWhitelistOn"
      | "takerDiscountTiers"
      | "toggleIsTrusted"
      | "toggleSweepWhitelist"
      | "toggleSweepWhitelistAddress"
      | "transferOwnership"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "ProtocolPayout" | "Sweep"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_FEE_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_PAYOUT_SPLIT_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SWEEP_ORDER_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TAKER_DISCOUNT_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_OVERAGE_RETURN_WEI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUSTUS_REQUEST_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destinations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsTrusted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDecimals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTakerDiscountTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolPayoutSplit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDestinationAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolPayoutSplit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTakerDiscountPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDecimals",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTakerDiscountTier",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepDust",
    values: [AddressLike[], AddressLike[], Trustus.TrustusPacketStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepWhitelistOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takerDiscountTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleIsTrusted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSweepWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSweepWhitelistAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_FEE_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_PAYOUT_SPLIT_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SWEEP_ORDER_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TAKER_DISCOUNT_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_OVERAGE_RETURN_WEI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTUS_REQUEST_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTakerDiscountTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payoutProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolPayoutSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestinationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolPayoutSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTakerDiscountPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTakerDiscountTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepWhitelistOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takerDiscountTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleSweepWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleSweepWhitelistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolPayoutEvent {
  export type InputTuple = [
    protocolSplit: BigNumberish,
    governorSplit: BigNumberish
  ];
  export type OutputTuple = [protocolSplit: bigint, governorSplit: bigint];
  export interface OutputObject {
    protocolSplit: bigint;
    governorSplit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SweepEvent {
  export type InputTuple = [
    makerAddress: AddressLike,
    tokenAddress: AddressLike,
    tokenAmount: BigNumberish,
    ethAmount: BigNumberish
  ];
  export type OutputTuple = [
    makerAddress: string,
    tokenAddress: string,
    tokenAmount: bigint,
    ethAmount: bigint
  ];
  export interface OutputObject {
    makerAddress: string;
    tokenAddress: string;
    tokenAmount: bigint;
    ethAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DustSweeper extends BaseContract {
  connect(runner?: ContractRunner | null): DustSweeper;
  waitForDeployment(): Promise<this>;

  interface: DustSweeperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  MAX_PROTOCOL_FEE_PCT: TypedContractMethod<[], [bigint], "view">;

  MAX_PROTOCOL_PAYOUT_SPLIT_PCT: TypedContractMethod<[], [bigint], "view">;

  MAX_SWEEP_ORDER_SIZE: TypedContractMethod<[], [bigint], "view">;

  MAX_TAKER_DISCOUNT_PCT: TypedContractMethod<[], [bigint], "view">;

  MIN_OVERAGE_RETURN_WEI: TypedContractMethod<[], [bigint], "view">;

  TRUSTUS_REQUEST_VALUE: TypedContractMethod<[], [string], "view">;

  destinations: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getIsTrusted: TypedContractMethod<
    [_trustedProviderAddress: AddressLike],
    [boolean],
    "view"
  >;

  getTokenDecimals: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getTokenTakerDiscountTier: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  governorWallet: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payoutProtocolFees: TypedContractMethod<[], [void], "nonpayable">;

  protocolFee: TypedContractMethod<[], [bigint], "view">;

  protocolPayoutSplit: TypedContractMethod<[], [bigint], "view">;

  protocolWallet: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDestinationAddress: TypedContractMethod<
    [_destinationAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setGovernorWallet: TypedContractMethod<
    [_governorWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeePercent: TypedContractMethod<
    [_protocolFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolPayoutSplit: TypedContractMethod<
    [_protocolPayoutSplitPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolWallet: TypedContractMethod<
    [_protocolWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setTakerDiscountPercent: TypedContractMethod<
    [_takerDiscountPercent: BigNumberish, _tier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenDecimals: TypedContractMethod<
    [_tokenAddress: AddressLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenTakerDiscountTier: TypedContractMethod<
    [_tokenAddress: AddressLike, _tier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setupToken: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  sweepDust: TypedContractMethod<
    [
      makers: AddressLike[],
      tokenAddresses: AddressLike[],
      packet: Trustus.TrustusPacketStruct
    ],
    [void],
    "payable"
  >;

  sweepWhitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  sweepWhitelistOn: TypedContractMethod<[], [boolean], "view">;

  takerDiscountTiers: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  toggleIsTrusted: TypedContractMethod<
    [_trustedProviderAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  toggleSweepWhitelist: TypedContractMethod<[], [void], "nonpayable">;

  toggleSweepWhitelistAddress: TypedContractMethod<
    [_whitelistAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_PROTOCOL_FEE_PCT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PROTOCOL_PAYOUT_SPLIT_PCT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SWEEP_ORDER_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TAKER_DISCOUNT_PCT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_OVERAGE_RETURN_WEI"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRUSTUS_REQUEST_VALUE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "destinations"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getIsTrusted"
  ): TypedContractMethod<
    [_trustedProviderAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenDecimals"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenTakerDiscountTier"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governorWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payoutProtocolFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "protocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolPayoutSplit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDestinationAddress"
  ): TypedContractMethod<
    [_destinationAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernorWallet"
  ): TypedContractMethod<[_governorWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeePercent"
  ): TypedContractMethod<
    [_protocolFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolPayoutSplit"
  ): TypedContractMethod<
    [_protocolPayoutSplitPercent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolWallet"
  ): TypedContractMethod<[_protocolWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTakerDiscountPercent"
  ): TypedContractMethod<
    [_takerDiscountPercent: BigNumberish, _tier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenDecimals"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenTakerDiscountTier"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setupToken"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sweepDust"
  ): TypedContractMethod<
    [
      makers: AddressLike[],
      tokenAddresses: AddressLike[],
      packet: Trustus.TrustusPacketStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sweepWhitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "sweepWhitelistOn"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "takerDiscountTiers"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleIsTrusted"
  ): TypedContractMethod<
    [_trustedProviderAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleSweepWhitelist"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleSweepWhitelistAddress"
  ): TypedContractMethod<
    [_whitelistAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolPayout"
  ): TypedContractEvent<
    ProtocolPayoutEvent.InputTuple,
    ProtocolPayoutEvent.OutputTuple,
    ProtocolPayoutEvent.OutputObject
  >;
  getEvent(
    key: "Sweep"
  ): TypedContractEvent<
    SweepEvent.InputTuple,
    SweepEvent.OutputTuple,
    SweepEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProtocolPayout(uint256,uint256)": TypedContractEvent<
      ProtocolPayoutEvent.InputTuple,
      ProtocolPayoutEvent.OutputTuple,
      ProtocolPayoutEvent.OutputObject
    >;
    ProtocolPayout: TypedContractEvent<
      ProtocolPayoutEvent.InputTuple,
      ProtocolPayoutEvent.OutputTuple,
      ProtocolPayoutEvent.OutputObject
    >;

    "Sweep(address,address,uint256,uint256)": TypedContractEvent<
      SweepEvent.InputTuple,
      SweepEvent.OutputTuple,
      SweepEvent.OutputObject
    >;
    Sweep: TypedContractEvent<
      SweepEvent.InputTuple,
      SweepEvent.OutputTuple,
      SweepEvent.OutputObject
    >;
  };
}
